#include<conio.h>
#include<stdio.h>
#include<stdlib.h>
struct node
{
	int info;
	struct node *link;
};
struct node *insert_s(struct node *start,int data);
struct node *insert(struct node *start,int data);
void display(struct node *start);
struct node *bubble_l(struct node *start);
void search(struct node *start,int data);
void main()
{
    struct node *start=NULL;
    int choice, data, item, pos;
    while(1)
    {
	printf("Enter your choice\n");
	printf("1.Insert in sorted list\n");

	printf("2.Display\n");
	printf("3.Search\n");
	printf("4.Quit\n\n");

	printf("5.Insert in unsorted list\n");
	printf("6.Sort the unsorted list by bubble sort by rearranging links\n");
	scanf("%d",&choice);

	switch(choice)
	{
	case 1:
	    printf("Enter the element.");
	    scanf("%d",&data);
	    start = insert_s(start,data);
	    break;
	case 2:
	    display(start);
	    break;
	case 3:
	    printf("Enter the element to be searched:");
	    scanf("%d",&data);
	    search(start,data);
	    break;
	case 4:
	    exit(1);

	case 5:
	    printf("Enter the element.");
	    scanf("%d",&data);
	    start = insert(start,data);
	    break;

	case 6:
	    printf("sort the list");
	    bubble_l(start);
	    break;

	default:
	    printf("Wrong choice");
	}
    }
}
struct node *insert_s(struct node *start, int data)
    {
	struct node *p, *tmp;
	tmp = (struct node *)malloc(sizeof(struct node));
	tmp->info = data;
	if(start == NULL || data<start->info)
	{
	    tmp->link = start;
	    start = tmp;
	    return start;
	}
	else
	{
	    p=start;
	    while(p->link!=NULL && p->link->info < data)
		p=p->link;
	    tmp->link = p->link;
	    p->link = tmp;
	}
	return start;
    }
void search(struct node *start,int data)
{
    struct node *p;
    int pos;
    if(start==NULL || data<start->info)
    {
	printf("%d not found in list\n",data);
	return;
    }
    p = start;
    pos = 1;
    while(p!=NULL && p->info<=data)
    {
	if(p->info == data)
	{
	    printf("%d found at the position %d\n",data,pos);
	    return;
	}
	p = p->link;
	pos++;
    }
    printf("%d not found in the list",data);
}
void display(struct node *start)
{
    struct node *q;
    if(start == NULL)
    {
	printf("List is empty ");
	return;
    }
    q = start;
    printf("List is: ");
    while(q!=NULL)
    {
	printf("%d",q->info);
	q=q->link;
    }
    printf("\n");
}
struct node *insert(struct node *start, int data)
    {
	struct node *p, *tmp;
	tmp = (struct node *)malloc(sizeof(struct node));
	tmp->info = data;
	if(start == NULL)
	{
	    tmp->link = start;
	    start = tmp;
	    return start;
	}
	else
	{
	    p=start;
	    while(p->link!=NULL)
		p=p->link;
	    tmp->link = p->link;
	    p->link = tmp;
	}
	return start;
    }
struct node *bubble_l(struct node *start)
{
    struct node *end, *r, *p, *q, *tmp;
    for(end=NULL; end!=start->link; end=q)
    {
        for(r=p=start; p->link!=end; r=p,p=p->link)
        {
            q=p->link;
            if(p->info > q->info)
            {
                p->link = q->link;
                q->link = p;
                if(p!=start)
                {
                    r->link = q;
		}
                else
                {
                    start = q;
                }
                tmp = p;
                p=q;
                q = tmp;
            }
        }
    }
    return start;
}
